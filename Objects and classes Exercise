01. Employees

function getEmployees(listOfEmployees) {
    const employees = []
    for (let name of listOfEmployees) {
        let currentEmployee = {}
        currentEmployee['Name'] = name;
        currentEmployee['Personal Number'] = name.length;
        employees.push(currentEmployee)
    }

    for (let employee of employees) {
        console.log(`Name: ${employee['Name']} -- Personal Number: ${employee["Personal Number"]}`)
    }
}

getEmployees([
    'Silas Butler',
    'Adnaan Buckley',
    'Juan Peterson',
    'Brendan Villarreal'
    ]
    )

---------------------VAR 2 

function getEmployees(input) {
    const employees = input.reduce((acc, curr) => {
        acc[curr] = curr.length;
        return acc;
    }, {});

    Object.entries(employees).forEach(([name, number]) => {
        console.log(`Name: ${name} -- Personal Number: ${number}`)
    });
}

ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸
02. Towns

function formatCityInfo(array) {
    for (let city of array) {
        const cityObj = {}
        const [name, lati, long] = city.split(" | ")
        cityObj['town'] = name;
        cityObj['latitude'] = Number(lati).toFixed(2);
        cityObj['longitude'] = Number(long).toFixed(2);
        console.log(cityObj)
    }
}

formatCityInfo(['Sofia | 42.696552 | 23.32601',
'Beijing | 39.913818 | 116.363625'])
ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸
03. Store Provision

function storeProvision(currentStock, productsForDelivery) {
    const stock = {};
    const allProvisions = currentStock.concat(productsForDelivery)
    for (x = 0; x < allProvisions.length; x ++) {
        if (x % 2 == 0) {
            if (allProvisions[x] in stock) {
                stock[allProvisions[x]] += Number(allProvisions[x+1])
            } else {
            stock[allProvisions[x]] = Number(allProvisions[x+1])
            }
        }
    }
    for (let product of Object.entries(stock)) {
        let [productName, qty] = product;
        console.log(`${productName} -> ${qty}`)
    }
}


storeProvision([
    'Chips', '5', 'CocaCola', '9', 'Bananas',
    '14', 'Pasta', '4', 'Beer', '2'
    ],
    [
    'Flour', '44', 'Oil', '12', 'Pasta', '7',
    'Tomatoes', '70', 'Bananas', '30'
    ]
)


----------------------VAR2

function storeProvision(inStock, toBeDelivered) {
    const all = [...inStock, ...toBeDelivered];
    
    const stock = all.reduce ((acc, curr, i) => {
        if (i % 2 === 0) {
            if (!acc.hasOwnProperty(curr)) {
                acc[curr] = 0;
            }
            acc[curr] += Number(all[i+1]);
        }

        return acc;
    }, {})

    Object.keys(stock).forEach(key => {
        console.log(`${key} -> ${stock[key]}`)
        
    });
}

ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸
04. Movies

function getMovieInfo(array) {
    function getData(command, elements) {
        var movieName = '';
        var counter = 1;
        for (x = 0; elements[x] !== command; x++) {
            movieName += elements[x] + " "
            counter++;
        }
        movieName = movieName.trim()
        elements.splice(0,counter)
        let other = elements.join(' ')
        return [movieName, other]
    }

    function updateInfo(movieName, update, other) {
        for (let obj of movies) {
            if (obj.name === movieName) {
                obj[update] = other
            }
        }
    }
    var movies = [];
    for (let line of array) {
        const elements = line.split(" ")
        if (elements.includes('addMovie')) {
            let movie = {};
            elements.shift();
            movie["name"] = elements.join(' ');
            movie["director"] = null;
            movie["date"] = null;
            movies.push(movie)
        } else if (elements.includes('directedBy')) {
            const [movieName, other] = getData('directedBy', elements)
            updateInfo(movieName, 'director', other)
        } else if (elements.includes('onDate')) {
            const [movieName, other] = getData('onDate', elements)
            updateInfo(movieName, 'date', other)
        }
    }

    for (let movie of movies) {
        if (movie.director !== null && movie.date !== null) {
            console.log(JSON.stringify(movie))
        }
    }
}


getMovieInfo([
    'addMovie The Avengers',
    'addMovie Superman',
    'The Avengers directedBy Anthony Russo',
    'The Avengers onDate 30.07.2010',
    'Captain America onDate 30.07.2010',
    'Captain America directedBy Joe Russo'
]
)

ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸
05. Inventory

function storeHeroes(array) {
    const inventory = [];

    for (let line of array) {
        heroObj = {}
        const [name, level, items] = line.split(" / ")
        heroObj["Hero"] = name;
        heroObj['level'] = Number(level);
        heroObj['items'] = []
        for (let item of items) {
            heroObj.items.push(item)
        }
        inventory.push(heroObj)
    }

    inventory.sort((a, b) => {
        return a.level - b.level
    })

    for (let obj of inventory) {
        itemsList = obj.items.join("")
        console.log(`Hero: ${obj.Hero}\nlevel => ${obj.level}\nitems => ${itemsList.trim()}`)
    }
}

storeHeroes([
    'Isacc / 25 / Apple, GravityGun',
    'Derek / 12 / BarrelVest, DestructionSword',
    'Hes / 1 / Desolator, Sentinel, Antara'
]
)

ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸
06. Word Tracker

function trackWords(array) {
    const searchingFor = array.shift().split(" ");
    const occurrences = {};
    
    for (let searchedWord of searchingFor) {
        occurrences[searchedWord] = 0;
        for (let currentWord of array) {
            if (currentWord === searchedWord) {
                occurrences[searchedWord]++;
            }
        }
    }
    var sorted = []
    for (let word in occurrences) {
        sorted.push([word, occurrences[word]])
    }
    sorted.sort((a,b) =>{ return b[1] - a[1]})

    for (let [word, count] of sorted) {
        console.log(`${word} - ${count}`)
    }
}

trackWords([
    'this sentence',
    'In', 'this', 'sentence', 'you', 'have',
    'to', 'count', 'the', 'occurrences', 'of',
    'the', 'words', 'this', 'and', 'sentence',
    'because', 'this', 'is', 'your', 'task'
]
)
ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸
07. Odd Occurrences

function printOddOccurrences(array) {
    const occurrences = {};
    for (let word of array.split(' ')) {
        word = word.toLowerCase()
        if (occurrences.hasOwnProperty(word)) {
            occurrences[word] ++ ;
        } else {
            occurrences[word] = 1;
        }
    }

    let result = []
    for (let word in occurrences) {
        if (!(occurrences[word] % 2 === 0)) {
            result.push(word)  
        }
    }
    console.log(result.join(" "))
}

printOddOccurrences('Cake IS SWEET is Soft CAKE sweet Food')

ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸
08. Piccolo

function recordCarNumbers(array) {
    var cars = []
    for (let line of array) {
        const [command, number] = line.split(", ")
        if (command === "IN") {
            if (!(cars.includes(number))) {
                cars.push(number)
            }
        } else if (command === "OUT") {
            if (cars.includes(number)) {
                cars = cars.filter((curNumber) => { return number !== curNumber })
            }
        }
    }
    if (!cars) {
        console.log("Parking Lot is Empty");
        return;
    }
    sorted = cars.sort()
    for (let car of sorted) {
        console.log(car)
    }
}

recordCarNumbers(['IN, CA2844AA',
    'IN, CA1234TA',
    'OUT, CA2844AA',
    'IN, CA9999TT',
    'IN, CA2866HI',
    'OUT, CA1234TA',
    'IN, CA2844AA',
    'OUT, CA2866HI',
    'IN, CA9876HH',
    'IN, CA2822UU']
)

ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸
09. Make a Dictionary

function makeDictionary(array) {
    const dictionary = {};
    for (let jsonObject of array) {
        let obj = JSON.parse(jsonObject);
        for (let line of Object.entries(obj)) {
            var [term, description] = line
        }
        dictionary[term] = description;
    }
    Object.keys(dictionary).sort().forEach(function(key) {
        console.log(`Term: ${key} => Definition: ${dictionary[key]}`)});
}

makeDictionary([
    '{"Cup":"A small bowl-shaped container for drinking from, typically having a handle"}',
    '{"Cake":"An item of soft sweet food made from a mixture of flour, fat, eggs, sugar, and other ingredients, baked and sometimes iced or decorated."} ',
    '{"Watermelon":"The large fruit of a plant of the gourd family, with smooth green skin, red pulp, and watery juice."} ',
    '{"Music":"Vocal or instrumental sounds (or both) combined in such a way as to produce beauty of form, harmony, and expression of emotion."} ', '{"Art":"The expression or application of human creative skill and imagination, typically in a visual form such as painting or sculpture, producing works to be appreciated primarily for their beauty or emotional power."} '
    ])

ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸
10. Class Vehicle

class Vehicle {
    constructor(type, model, parts, fuel) {
        this.type = type;
        this.model = model;
        this.parts = parts;
        this.parts.engine = this.parts.engine
        this.parts.power = this.parts.power
        this.parts.quality = this.parts.engine * this.parts.power
        this.fuel = fuel
    }
    drive(fuelLoss) {this.fuel -= fuelLoss}
}

let parts = { engine: 6, power: 100 };
let vehicle = new Vehicle('a', 'b', parts, 200);
vehicle.drive(100);
console.log(vehicle.fuel);
console.log(vehicle.parts.quality);

ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸ğŸ©¸
