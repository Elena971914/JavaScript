DOM - document object module

What gives us the opportunity to work with the HTML. The browser creates the DOM(representnation of the HTML of a page). 
<script> tag can be added in the html file. If our JS is in another file: 
<script src="index.js"></script>
It is better to diverse responsibilities.

DOM is inmemory representation of the HTML by making them JS objects. 
Methods - functions we can call on different elements. 
Properties are values of HTML elements that can be set and changed. 
$0 written in the console gives us the element we seleted frorm the html. 
$0. gives us all properties we can use on this object.
$0.style.background = 'red' - we write the property like so 
$0.style.color = 'white'
$0.style.color - simply returns the current value

Every element has attributes in the HTML. They are properties in the DOM.
value is a property especially for the input fields.

element.innerHTML = "<p>Welcome to the DOM <\p>"; - gives us the entire HTML of the element we selected, deletes it and sets what we wrote

API - the way we commmunicate with the database. It gives us only what we want. 

When we are targeting element by class id and tag name we receive array. In the selectors we don't write #,.; only string.
We can use querySelector() (array with the first match), querySelectorAll() is for selecting element like in css:
document.querySelector('#sum')


What we receive from the selectors can be iterated but doesn't have all the functions of array. In order to do so we should use:
Array.from(document.querySelectorAll('input')) -->this we can map

Nodelist and query collection:
querySelector makes code consistent. It returns NodeList. getElementByTagname() returns query collection. 
Query collection - always live. When we change smth in the browser it also chages.

In the HTML :
<div id = "test></d>
const test = document.querySelector("#test");
test.innerHTML += "<input />" -adds another input field
test.innertext += "<input />" -adds only text

inputs = document.querySelectorAll('input')
the nodelist won't change in the upper situation

.textContent - returns the content of the html element no matter if the visibility is hidden
.innerText - returns only the visible elements

API is everything we use to communicate to the browser
.map is API by which we communicate to the array
Everything that packages smth for the browser is API. 
In the context of web communication API is a synonym of REST.

REST API is a standard for communicating information by using networking calls

Depricated - parts of the language that are not used anymore and deleted. In JS the not usable functionality is not beign depricated.

DOM can be iterated and we can use direct parents and children.

We should use createElement to create new elements. We call it with the type of element we want to create - the tag. 
When we append it to the DOM tree they become visible.

Event Listener

element.addEventListener('click', clickMe) --- first comes the name of the event (one of the predefined), then comes the function (it will be called with the element)

🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥 -   T A S K S   - 🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥

01. Sum Numbers
    function calc() {
    const number1 = document.getElementById('num1')
    const number2 = document.getElementById('num2')
    const sum = Number(number1.value) + Number(number2.value)
    document.getElementById('sum').value = sum
}

🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥
02. Show More

function showText() {
    document.getElementById('more').style.display = 'none'
    document.getElementById('text').style.display = 'inline'
}

🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥
03. Collect List Items

function extractText() {
    const textItems = Array.from(document.querySelectorAll('li'))
    const text = textItems.map((item) => item.textContent).join('\n')
    document.querySelector('textarea').value = text
}

---------VAR 2

function extractText() {
let itemNodes = document.querySelectorAll("ul#items li");
let textarea = document.querySelector("#result");
for (let node of itemNodes) {
textarea.value += node.textContent + "\n";
}
}
🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥
04. List of Items

function addItem() {
let text = document.getElementById('newItemText').value;
let li = document.createElement("li");
li.appendChild(document.createTextNode(text));
document.getElementById("items").appendChild(li);
//clearing the input:
document.getElementById('newItemText').value = '';
} 

-------------VAR2

function addItem() {
//get what is written in the field
    const value = document.querySelector('#newItemText').value;
//access the place we want to add/use method to write/
// document.querySelector('ul').innerHTML += `<li>${value}</li>`
    //create element in the memory
    const item = document.createElement('li')
    //changing the value of this element
    item.textContent = value
    //adding it to the html
    document.querySelector('ul').appendChild(item);
}
🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥
05. Delete from Table

function deleteByEmail() {
let email = document.getElementsByName("email")[0].value;
let secondColumn = document.querySelectorAll(
"#customers tr td:nth-child(2)");
for (let td of secondColumn)
if (td.textContent == email) {
let row = td.parentNode;
row.parentNode.removeChild(row);
document.getElementById('result').
textContent = "Deleted.";
return;
}
document.getElementById('result').textContent =
"Not found.";
}
-------------------------VAR2

function deleteByEmail() {
    //we take the element that should be deleted
    const email = document.querySelector('input[name="email"]').value
    //get all even table boxes and convert them to array
    const emailBoxes = Array.from(document.querySelectorAll("td:nth-child(even)"))

    const userEmailBox = emailBoxes.find(box => box.textContent === email)

    const result = document.querySelector('#result');
    //delete the whole row
    if (userEmailBox) {
        userEmailBox.parentElement.remove()
        result.textContent = 'Deleted.'
    }
    else {
        result.textContent = 'Not found.'
    }
}
🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥
06. Add / Delete
🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥
07. Colorize Table
🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥
08. Sum Table
🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥
09. Highlight Active
🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥🐥
function addItem() {
//get what is written in the field
    const value = document.querySelector('#newItemText').value;
//access the place we want to add/use method to write/
    // document.querySelector('ul').innerHTML += `<li>${value}</li>`
    //create element in the memory
    const item = document.createElement('li')
    //changing the value of this element
    item.textContent = value
    //adding it to the html
    document.querySelector('ul').appendChild(item);
}

-------------------------------------------

function deleteByEmail() {
    //we take the element that should be deleted
    const email = document.querySelector('input[name="email"]').value
    //get all even table boxes and convert them to array
    const emailBoxes = Array.from(document.querySelectorAll("td:nth-child(even)"))

    const userEmailBox = emailBoxes.find(box => box.textContent === email)

    const result = document.querySelector('#result');
    //delete the whole row
    if (userEmailBox) {
        userEmailBox.parentElement.remove()
        result.textContent = 'Deleted.'
    }
    else {
        result.textContent = 'Not found.'
    }
}

06. Add/Delete
function addItem() {
   
   const value = document.querySelector('#newItemText').value;
   const listItem = createListItem(value)
   document.querySelector('ul').appendChild(item)

   function createListItem(text) {
    const item = document.createElement('li')
       
    item.textContent = text
    item.appendChild(createDeleteButton())

    return item
   }
       
   function createDeleteButton() {
    const deleteButton = document.createElement('a');
   deleteButton.href = "#";
   deleteButton.textContent = '[Delete}'
   deleteButton.addEventListener('click', (e) => e.target.parentElement.remove())

    return deleteButton}
}

































