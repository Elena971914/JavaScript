01. Class Storage

class Storage {
    constructor(capacity) {
        this.capacity = capacity;
        this.storage = [];
    }

    get totalCost() {
        return this.storage.reduce((acc, curr) => {return acc+curr.price * curr.quantity},0);
    }

    addProduct(product) {
        this.storage.push(product);
        this.capacity -= product.quantity;
        return;
    }

    getProducts() {
        result = [];
        this.storage.forEach(element => {result.push(JSON.stringify(element))
        });
        return result.join('\n');
    }
}
const Storage = result;

let productOne = {name: 'Cucamber', price: 1.50, quantity: 15};
let productTwo = {name: 'Tomato', price: 0.90, quantity: 25};
let productThree = {name: 'Bread', price: 1.10, quantity: 8};

let storage = new Storage(50);

storage.addProduct(productOne);
storage.addProduct(productTwo);
storage.addProduct(productThree);

let output = storage.getProducts();

expect(output).to.equal('{"name":"Cucamber","price":1.5,"quantity":15}\n{"name":"Tomato","price":0.9,"quantity":25}\n{"name":"Bread","price":1.1,"quantity":8}');
expect(storage.capacity).to.equal(2);
expect(storage.totalCost).to.equal(53.8);

ðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽ
02. Catalogue

function solve(input) {
    const products = input.reduce((acc, curr) => {
        let [name, price] = curr.split(' : ');
        acc[name] = price;
        return acc;
    }, {})

    sorted = Object.keys(products)
        .map(key => key.toLowerCase())
        .sort()

    let letter = sorted[0][0]

    for (let key of sorted) {
        for (let originalKey of Object.keys(products)) {
            if (key === originalKey.toLowerCase()) {
                if (originalKey[0][0] !== letter) {
                    letter = originalKey[0]
                    console.log(letter)
                }
                console.log(`  ${originalKey}: ${products[originalKey]}`)
            }
        }
    }
}

solve([
    'Appricot : 20.4',
    'Fridge : 1500',
    'TV : 1499',
    'Deodorant : 10',
    'Boiler : 300',
    'Apple : 1.25',
    'Anti-Bug Spray : 15',
    'T-Shirt : 10'
])
ðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽ
03. Class Laptop

class Laptop {
    constructor(info, quality) {
        this.info = {
            producer: info.producer,
            age: info.age,
            brand: info.brand,
        };
        this.quality = quality;
        this.isOn = false;
    }

    turnOn() {
        this.isOn = true;
        this.quality -= 1
    };

    turnOff() {
        this.isOn = false;
        this.quality -= 1
    };

    showInfo() { return JSON.stringify(this.info) }

    get price() {return Number((800 - (this.info.age * 2)) + (this.quality * 0.5))}
}


let info = {
    producer: "Dell", age: 2,
    brand: "XPS"
}
let laptop = new Laptop(info, 10)
laptop.turnOn()
console.log(laptop.showInfo())
laptop.turnOff()
console.log(laptop.quality)
laptop.turnOn()
console.log(laptop.isOn)
console.log(laptop.price)

ðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽ
04. Flight Schedule

function solve([flights, changedStatuses, status]) {
    const flightMap = flights.reduce((acc, curr) => {
        const [number, ...destinationWords] = curr.split(' ');
        const Destination = destinationWords.join(" ");
        acc[number] = {
            Destination,
            Status: null
        }
        return acc;
    }, {})

    changedStatuses.forEach(line => {
        let [number, status] = line.split(" ");
        if (flightMap[number]) {
        flightMap[number].Status = status;
}});

    status = status.join(" ")
    if (status === "Ready to fly") {
        Object.entries(flightMap).forEach(([number, data]) => {
            if (data.Status === null) {
                data.Status = "Ready to fly"
                console.log(data)
            } 
        })
    } else {
        Object.entries(flightMap).forEach(([number, data]) => {
            if (data.Status === status) {
                console.log(data)
    }})
}}


solve([['WN269 Delaware',
'FL2269 Oregon',
'WN498 Las Vegas',
'WN3145 Ohio',
'WN612 Alabama',
'WN4010 New York',
'WN1173 California',
'DL2120 Texas',
'KL5744 Illinois',
'WN678 Pennsylvania'],
['DL2120 Cancelled',
'WN612 Cancelled',
'WN1173 Cancelled',
'SK430 Cancelled'],
['Cancelled']
])
ðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽ
05. School Register

function sortStudents(arr) {
    let schoolRegister = {};
    for (let line of arr) {
        let tokens = line.split(', ');
        let grade = Number(tokens[1].split(': ')[1]) + 1;
        let name = tokens[0].split(': ')[1];
        let score = Number(tokens[2].split(': ')[1]);
        if (score > 3) {
            let student = {name, score};
            if (!schoolRegister.hasOwnProperty(grade)) {
                schoolRegister[grade] = [];
            }
            schoolRegister[grade].push(student);
        }
    }
    let sortedGrades = Object.keys(schoolRegister).sort((a,b) => a - b);
    for (let grade of sortedGrades) {
        let students = schoolRegister[grade];
        console.log(`${grade} Grade`);
        console.log(`List of students: ${students.map(s => s.name).join(', ')}`);
        console.log(`Average annual score from last year: ${average(students.map(s => s.score)).toFixed(2)}`);
        console.log();
    }

    function average(arr) {
        return arr.reduce((a, b) => a + b, 0) / arr.length;
    }
}

sortStudents([
    "Student name: Mark, Grade: 8, Graduated with an average score: 2.75",
     "Student name: Ethan, Grade: 9, Graduated with an average score: 5.66",
     "Student name: George, Grade: 8, Graduated with an average score: 2.83",
     "Student name: Steven, Grade: 10, Graduated with an average score: 4.20",
     "Student name: Joey, Grade: 9, Graduated with an average score: 4.90",
     "Student name: Angus, Grade: 11, Graduated with an average score: 2.90",
     "Student name: Bob, Grade: 11, Graduated with an average score: 5.15",
     "Student name: Daryl, Grade: 8, Graduated with an average score: 5.95",
     "Student name: Bill, Grade: 9, Graduated with an average score: 6.00",
     "Student name: Philip, Grade: 10, Graduated with an average score: 5.05",
     "Student name: Peter, Grade: 11, Graduated with an average score: 4.88",
     "Student name: Gavin, Grade: 10, Graduated with an average score: 4.00"
    ])
ðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽ
06. Browser History

function getBrowserHistory(obj, list) {
    for (let line of list) {
        let [command, page] = line.split(" ");
        if (command === "Close") {
            if (obj['Open Tabs'].includes(page)) {
                let index = obj["Open Tabs"].indexOf(page);
                obj['Open Tabs'].splice(index, 1)
                obj['Recently Closed'].push(page)
                obj['Browser Logs'].push(line)
            }
        } else if (command === "Open") {
            if (!obj['Open Tabs'].hasOwnProperty(page)) { obj['Open Tabs'].push(page) }
            obj['Browser Logs'].push(line)
        } else if (line === "Clear History and Cache") {
            obj['Open Tabs'] = [];
            obj["Recently Closed"] = [];
            obj["Browser Logs"] = []
        }
    }

    if (obj) {
        console.log(obj['Browser Name'])
        console.log(`Open Tabs: ${obj['Open Tabs'].join(', ')}`)
        console.log(`Recently Closed: ${obj['Recently Closed'].join(', ')}`)
        console.log(`Browser Logs: ${obj['Browser Logs'].join(', ')}`)
    }
}

getBrowserHistory({
    "Browser Name": "Mozilla Firefox",
    "Open Tabs": ["YouTube"],
    "Recently Closed": ["Gmail",
        "Dropbox"],
    "Browser Logs": ["Open Gmail",
        "Close Gmail", "Open Dropbox", "Open YouTube", "Close Dropbox"]
}, ["Open Wikipedia", "Clear History and Cache", "Open Twitter"])
ðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽ
07. Sequences

function sequences(input) {
    input = input
        .map(JSON.parse)
        .map(el => el.sort((a, b) => b - a))
        .map(JSON.stringify);
    [...new Set(input)]
        .map(JSON.parse)
        .sort((a, b) => a.length - b.length)
        .forEach(el => console.log(`[${el.join(', ')}]`));
}

------------------------------------------VAR2

function getUniqueSequences(input) {
    const listOfArrays = input.map(arr => JSON.parse(arr));
    const uniqueArrays = [listOfArrays[0]];

    for (let array of listOfArrays.slice(1)) {
        var unique = true
        for (let pastArray of uniqueArrays) {
            let one = new Set(array)
            let two = new Set(pastArray)
            const isSameSet = (one, two) => {
                if (one.size != two.size) return false;
                const arr1 = [...one];
                const arr2 = [...two];
                for (let x of arr1) {
                  if (!two.has(x)) {
                    return false;
                  }
                }
                for (let x of arr2) {
                  if (!one.has(x)) {
                    return false;
                  }
                }
                return true;
              }
            if (isSameSet(one, two)) {
                unique = false
            }
            if (unique) {
                uniqueArrays.push(array)
            }
        }
    }
    uniqueArrays.sort((a, b) => a.length - b.length).forEach(arr => console.log(arr.sort((a,b) => b - a)))
}

getUniqueSequences(["[-3, -2, -1, 0, 1, 2, 3, 4]",
    "[10, 1, -17, 0, 2, 13]",
    "[4, -3, 3, -2, 2, -1, 1, 0]"])
ðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽ
08. Garage

function viewGarages(input) {
    const garages = {}
    input.forEach(line => {
        const [num, data] = line.split(" - ");
        if (!garages.hasOwnProperty(num)) {
            garages[num] = []
        }
        garages[num].push(data.replaceAll(":", " -"))
    })
    Object.keys(garages).forEach(garageNum => {
        console.log(`Garage â„– ${garageNum}`)
        garages[garageNum].forEach(car => console.log(`--- ${car}`))})
}

viewGarages(['1 - color: blue, fuel type: diesel', '1 - color: red, manufacture: Audi', '2 - fuel type: petrol', '4 - color: dark blue, fuel type: diesel, manufacture: Fiat']
)

viewGarages(['1 - color: green, fuel type: petrol',
'1 - color: dark red, manufacture: WV',
'2 - fuel type: diesel',
'3 - color: dark blue, fuel type: petrol'])

----------------------------------------VAR2

function viewGarages(input) {
    let garages = [];
    for (const line of input) {
        let [garageNumber, carInfo] = line.split(' - ');
        let found = garages.find(g => g.garageNumber === garageNumber);
        if (!found) {
            garages.push({
                garageNumber: garageNumber,
                carInfo: []
            });
            found = garages.find(g => g.garageNumber === garageNumber);
        }
        found.carInfo.push(carInfo);
    }
    let output = '';
    garages.forEach(garage => {
        output += `Garage â„– ${garage.garageNumber}\n`;
        for (let currCar of garage.carInfo) {
            currCar = currCar.replace(/: /g, ' - ');
            output += `--- ${currCar}\n`;
        }
    });
    console.log(output);
}
ðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽ
09. Armies

60/100

function sortArmies(input) {
    const leaders = {}
    for (let line of input) {
        if (line.includes("arrives")) {
            let leader = {};
            leaderName = line.replace(" arrives", "");
            leader.armies = {};
            leader.totalCount = 0;
            leaders[leaderName] = leader
        } else if (line.includes(":")) {
            let [leader, armyData] = line.split(": ")
            let [armyName, armyCount] = armyData.split(", ")
            if (!leaders.hasOwnProperty(leader)) { continue }
            leaders[leader].armies[armyName] = Number(armyCount)
            leaders[leader].totalCount += Number(armyCount)
        } else if (line.includes("+")) {
            let [armyName, armyCount] = line.split(" + ")
            Object.keys(leaders).forEach(leader => {
                if (leaders[leader].armies.hasOwnProperty(armyName)) {
                    leaders[leader].armies[armyName] += Number(armyCount)
                    leaders[leader].totalCount += Number(armyCount)
                }
            })
        } else if (line.includes("defeated")) {
            let leader = line.replace(" defeated", "")
            if (leaders.hasOwnProperty(leader)) {
                delete leaders[leader]
            }
        }
    }

    let sortByTotal = []
    Object.keys(leaders).forEach(leaderName => sortByTotal.push(leaders[leaderName].totalCount))
    sortByTotal.sort().reverse()

    for (let currentTotal of sortByTotal) {
        Object.keys(leaders).forEach(curLead => {
            if (leaders[curLead].totalCount === currentTotal) {
                console.log(`${curLead}: ${currentTotal}`)
                // leaders[curLead].armies
                Object.keys(leaders[curLead].armies).sort(function (a, b) { return leaders[curLead].armies[b] - leaders[curLead].armies[a] }).forEach(key => console.log(`>>> ${key} - ${leaders[curLead].armies[key]}`))
            }
        })
    }
}


sortArmies(['Rick Burr arrives', 'Fergus: Wexamp, 30245', 'Rick Burr: Juard, 50000', 'Findlay arrives', 'Findlay: Britox, 34540', 'Wexamp + 6000',
    'Juard + 1350', 'Britox + 4500',
    'Porter arrives', 'Porter: Legion, 55000', 'Legion + 302', 'Rick Burr defeated', 'Porter: Retix, 3205'])


function solve(params) {
    let armies = {};
    let armyLeaders = [];
 
    for (let param of params) {
        if (param.includes('arrives')) {
            let indexOfArrives = param.indexOf('arrives');
            let leader = param.slice(0, indexOfArrives).trim();
            if (!armies.hasOwnProperty(leader)) {
                armies[leader] = {
                    armiesName: {},
                    totalArmyCount: 0
                };
            }
            armyLeaders.push(leader);
        } else if (param.includes('defeated')) {
            let indexOfDefeated = param.indexOf('defeated');
            let leader = param.slice(0, indexOfDefeated).trim();
            let indexOfLeader = armyLeaders.indexOf(leader);
            if (armies.hasOwnProperty(leader)) {
                delete armies[leader];
                armyLeaders.splice(indexOfLeader, 1);
            }
        } else if (param.includes(':')) {
            let [leader, army] = param.split(': ');
            let [armyName, armyCount] = army.split(', ');
            if (armies.hasOwnProperty(leader)) {
                if (!armies[leader].armiesName.hasOwnProperty(armyName)) {
                    armies[leader].armiesName[armyName] = Number(armyCount);
                    armies[leader].totalArmyCount += Number(armyCount);
                }
            }
        } else if (param.includes('+')) {
            let [armyName, armyCount] = param.split(' + ');
            armyLeaders.forEach(leader => {
                for (let army in armies[leader]) {
                    if (armies[leader][army].hasOwnProperty(armyName)) {
                        armies[leader].armiesName[armyName] += Number(
                            armyCount
                        );
                        armies[leader].totalArmyCount += Number(armyCount);
                    }
                }
            });
        }
    }
    // console.log(armies);
    Object.entries(armies)
        .sort((a, b) => b[1].totalArmyCount - a[1].totalArmyCount)
        .forEach(army => {
            console.log(`${army[0]}: ${army[1].totalArmyCount}`);
            Object.entries(army[1].armiesName)
                .sort((a, b) => b[1] - a[1])
                .forEach(armyName => {
                    console.log(`>>> ${armyName[0]} - ${armyName[1]}`)
 
                });
 
        });
}
ðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽ
10. Comments

function sortArticleComments(data) {
    let dataBase = { userList: [], articleList: [], comments: {} };

    for (let line of data) {
        if (line.split(' ').length === 2) {
            const [command, item] = line.split(' ');

            if (command === 'user') {
                if (!dataBase.userList.includes(item)) {
                    dataBase.userList.push(item);
                }
            } else if (command === 'article') {
                if (!dataBase.articleList.includes(item)) {
                    dataBase.articleList.push(item);
                }
            }
        } else {
            const [username, article, title, content] = line
                .replace(' posts on ', '&')
                .replace(': ', '&')
                .replace(', ', '&')
                .split('&');

            if (dataBase.userList.includes(username) && dataBase.articleList.includes(article)) {
                if (!dataBase.comments.hasOwnProperty(article)) {
                    dataBase.comments[article] = [{
                        [username]: `--- From user ${username}: ${title} - ${content}`
                    }];
                } else {
                    dataBase.comments[article].push({ [username]: `--- From user ${username}: ${title} - ${content}` });
                }
            }
        }
    }

    const sortedComments = Object.entries(dataBase.comments)
        .sort((a, b) => b[1].length - a[1].length);

    for (const [name, comments] of sortedComments) {
        console.log(`Comments on ${name}`);
        for (const commentItem of comments.sort((a, b) => Object.keys(a)[0].localeCompare(Object.keys(b)[0]))) {
            const [user, comment] = Object.entries(commentItem)[0];
            console.log(comment);
        }
    }
}

sortArticleComments(['user aUser123', 'someUser posts on someArticle: NoTitle, stupidComment', 'article Books', 'article Movies', 'article Shopping', 'user someUser', 'user uSeR4', 'user lastUser', 'uSeR4 posts on Books: I like books, I do really like them', 'uSeR4 posts on Movies: I also like movies, I really do', 'someUser posts on Shopping: title, I go shopping every day', 'someUser posts on Movies: Like, I also like movies very much']
)
ðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽ
11. Book Shelf

function solve(input) {
    let library = {};
 
    for (const line of input) {
        if (line.includes('->')) {
            let [id, genre] = line.split(' -> ');
 
            if (!library.hasOwnProperty(id)) {
                library[id] = { [genre]: [] };
            }
        } else {
            let [bookInfo, genre] = line.split(', ');
 
            for (const key in library) {
                if (library[key].hasOwnProperty(genre)) {
                    library[key][genre].push(bookInfo);
                    break;
                }
            }
        }
    }
 
    Object.keys(library).sort((a, b) => Object.entries(library[b])[0][1].length - Object.entries(library[a])[0][1].length)
        .forEach(id => {
            console.log(`${id} ${Object.keys(library[id])}: ${Object.values(library[id])[0].length}`);
            Object.values(library[id]).forEach(values => {
                values.sort((a, b) => a.localeCompare(b)).forEach(v => {
                    console.log(`--> ${v}`);
                });
            });
        });
}
ðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽðŸŒŽ
12. SoftUni Students

function solve(arr) {
    let listOfCourses = {};
 
    for (let element of arr) {
        if (!element.includes(`[`)) {
            let [courseName, capacity] = element.split(`: `);
            if (!listOfCourses.hasOwnProperty(courseName)) {
                listOfCourses[courseName] = {
                    capacity: Number(capacity),
                    students: [],  //here
                }
            } else {
                listOfCourses[courseName].capacity += Number(capacity);
            }
        } else if (element.includes(`with email`)) {
            element = element.split(`[`);
            let userName = element.shift();
            element = element[0].split(`]`);
            let creditCount = Number(element.shift());
            let temp = element[0].split(` `);
            let email = temp[3];
            let courseName = element[0].split(` joins `)[1];
            if (listOfCourses.hasOwnProperty(courseName) && listOfCourses[courseName].capacity > 0) {
                listOfCourses[courseName].students.push({ //here
                    userName: userName,                     //here
                    creditCount: creditCount,
                    email: email,
                })
                listOfCourses[courseName].capacity--;
            }
        }
    }
    let sortedByCapacity = Object.entries(listOfCourses)
        .sort((a, b) => Object.keys(b[1].students).length - Object.keys(a[1].students).length);
    for (let element of sortedByCapacity) {
        console.log(`${element[0]}: ${element[1].capacity} places left`);
        element[1].students.sort((a, b) => b.creditCount - a.creditCount).forEach(x => console.log(`--- ${x.creditCount}: ${x.userName}, ${x.email}`)); //here
    }
}
