01. Class Storage

class Storage {
    constructor(capacity) {
        this.capacity = capacity;
        this.storage = [];
    }

    get totalCost() {
        return this.storage.reduce((acc, curr) => {return acc+curr.price * curr.quantity},0);
    }

    addProduct(product) {
        this.storage.push(product);
        this.capacity -= product.quantity;
        return;
    }

    getProducts() {
        result = [];
        this.storage.forEach(element => {result.push(JSON.stringify(element))
        });
        return result.join('\n');
    }
}
const Storage = result;

let productOne = {name: 'Cucamber', price: 1.50, quantity: 15};
let productTwo = {name: 'Tomato', price: 0.90, quantity: 25};
let productThree = {name: 'Bread', price: 1.10, quantity: 8};

let storage = new Storage(50);

storage.addProduct(productOne);
storage.addProduct(productTwo);
storage.addProduct(productThree);

let output = storage.getProducts();

expect(output).to.equal('{"name":"Cucamber","price":1.5,"quantity":15}\n{"name":"Tomato","price":0.9,"quantity":25}\n{"name":"Bread","price":1.1,"quantity":8}');
expect(storage.capacity).to.equal(2);
expect(storage.totalCost).to.equal(53.8);

🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎
02. Catalogue

function solve(input) {
    const products = input.reduce((acc, curr) => {
        let [name, price] = curr.split(' : ');
        acc[name] = price;
        return acc;
    }, {})

    sorted = Object.keys(products)
        .map(key => key.toLowerCase())
        .sort()

    let letter = sorted[0][0]

    for (let key of sorted) {
        for (let originalKey of Object.keys(products)) {
            if (key === originalKey.toLowerCase()) {
                if (originalKey[0][0] !== letter) {
                    letter = originalKey[0]
                    console.log(letter)
                }
                console.log(`  ${originalKey}: ${products[originalKey]}`)
            }
        }
    }
}

solve([
    'Appricot : 20.4',
    'Fridge : 1500',
    'TV : 1499',
    'Deodorant : 10',
    'Boiler : 300',
    'Apple : 1.25',
    'Anti-Bug Spray : 15',
    'T-Shirt : 10'
])
🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎
03. Class Laptop

class Laptop {
    constructor(info, quality) {
        this.info = {
            producer: info.producer,
            age: info.age,
            brand: info.brand,
        };
        this.quality = quality;
        this.isOn = false;
    }

    turnOn() {
        this.isOn = true;
        this.quality -= 1
    };

    turnOff() {
        this.isOn = false;
        this.quality -= 1
    };

    showInfo() { return JSON.stringify(this.info) }

    get price() {return Number((800 - (this.info.age * 2)) + (this.quality * 0.5))}
}


let info = {
    producer: "Dell", age: 2,
    brand: "XPS"
}
let laptop = new Laptop(info, 10)
laptop.turnOn()
console.log(laptop.showInfo())
laptop.turnOff()
console.log(laptop.quality)
laptop.turnOn()
console.log(laptop.isOn)
console.log(laptop.price)

🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎
04. Flight Schedule

function solve([flights, changedStatuses, status]) {
    const flightMap = flights.reduce((acc, curr) => {
        const [number, ...destinationWords] = curr.split(' ');
        const Destination = destinationWords.join(" ");
        acc[number] = {
            Destination,
            Status: null
        }
        return acc;
    }, {})

    changedStatuses.forEach(line => {
        let [number, status] = line.split(" ");
        if (flightMap[number]) {
        flightMap[number].Status = status;
}});

    status = status.join(" ")
    if (status === "Ready to fly") {
        Object.entries(flightMap).forEach(([number, data]) => {
            if (data.Status === null) {
                data.Status = "Ready to fly"
                console.log(data)
            } 
        })
    } else {
        Object.entries(flightMap).forEach(([number, data]) => {
            if (data.Status === status) {
                console.log(data)
    }})
}}


solve([['WN269 Delaware',
'FL2269 Oregon',
'WN498 Las Vegas',
'WN3145 Ohio',
'WN612 Alabama',
'WN4010 New York',
'WN1173 California',
'DL2120 Texas',
'KL5744 Illinois',
'WN678 Pennsylvania'],
['DL2120 Cancelled',
'WN612 Cancelled',
'WN1173 Cancelled',
'SK430 Cancelled'],
['Cancelled']
])
🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎
05. School Register

function sortStudents(arr) {
    let schoolRegister = {};
    for (let line of arr) {
        let tokens = line.split(', ');
        let grade = Number(tokens[1].split(': ')[1]) + 1;
        let name = tokens[0].split(': ')[1];
        let score = Number(tokens[2].split(': ')[1]);
        if (score > 3) {
            let student = {name, score};
            if (!schoolRegister.hasOwnProperty(grade)) {
                schoolRegister[grade] = [];
            }
            schoolRegister[grade].push(student);
        }
    }
    let sortedGrades = Object.keys(schoolRegister).sort((a,b) => a - b);
    for (let grade of sortedGrades) {
        let students = schoolRegister[grade];
        console.log(`${grade} Grade`);
        console.log(`List of students: ${students.map(s => s.name).join(', ')}`);
        console.log(`Average annual score from last year: ${average(students.map(s => s.score)).toFixed(2)}`);
        console.log();
    }

    function average(arr) {
        return arr.reduce((a, b) => a + b, 0) / arr.length;
    }
}

sortStudents([
    "Student name: Mark, Grade: 8, Graduated with an average score: 2.75",
     "Student name: Ethan, Grade: 9, Graduated with an average score: 5.66",
     "Student name: George, Grade: 8, Graduated with an average score: 2.83",
     "Student name: Steven, Grade: 10, Graduated with an average score: 4.20",
     "Student name: Joey, Grade: 9, Graduated with an average score: 4.90",
     "Student name: Angus, Grade: 11, Graduated with an average score: 2.90",
     "Student name: Bob, Grade: 11, Graduated with an average score: 5.15",
     "Student name: Daryl, Grade: 8, Graduated with an average score: 5.95",
     "Student name: Bill, Grade: 9, Graduated with an average score: 6.00",
     "Student name: Philip, Grade: 10, Graduated with an average score: 5.05",
     "Student name: Peter, Grade: 11, Graduated with an average score: 4.88",
     "Student name: Gavin, Grade: 10, Graduated with an average score: 4.00"
    ])
🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎
06. Browser History

function getBrowserHistory(obj, list) {
    for (let line of list) {
        let [command, page] = line.split(" ");
        if (command === "Close") {
            if (obj['Open Tabs'].includes(page)) {
                let index = obj["Open Tabs"].indexOf(page);
                obj['Open Tabs'].splice(index, 1)
                obj['Recently Closed'].push(page)
                obj['Browser Logs'].push(line)
            }
        } else if (command === "Open") {
            if (!obj['Open Tabs'].hasOwnProperty(page)) { obj['Open Tabs'].push(page) }
            obj['Browser Logs'].push(line)
        } else if (line === "Clear History and Cache") {
            obj['Open Tabs'] = [];
            obj["Recently Closed"] = [];
            obj["Browser Logs"] = []
        }
    }

    if (obj) {
        console.log(obj['Browser Name'])
        console.log(`Open Tabs: ${obj['Open Tabs'].join(', ')}`)
        console.log(`Recently Closed: ${obj['Recently Closed'].join(', ')}`)
        console.log(`Browser Logs: ${obj['Browser Logs'].join(', ')}`)
    }
}

getBrowserHistory({
    "Browser Name": "Mozilla Firefox",
    "Open Tabs": ["YouTube"],
    "Recently Closed": ["Gmail",
        "Dropbox"],
    "Browser Logs": ["Open Gmail",
        "Close Gmail", "Open Dropbox", "Open YouTube", "Close Dropbox"]
}, ["Open Wikipedia", "Clear History and Cache", "Open Twitter"])
🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎
07. Sequences

function sequences(input) {
    input = input
        .map(JSON.parse)
        .map(el => el.sort((a, b) => b - a))
        .map(JSON.stringify);
    [...new Set(input)]
        .map(JSON.parse)
        .sort((a, b) => a.length - b.length)
        .forEach(el => console.log(`[${el.join(', ')}]`));
}

------------------------------------------VAR2

function getUniqueSequences(input) {
    const listOfArrays = input.map(arr => JSON.parse(arr));
    const uniqueArrays = [listOfArrays[0]];

    for (let array of listOfArrays.slice(1)) {
        var unique = true
        for (let pastArray of uniqueArrays) {
            let one = new Set(array)
            let two = new Set(pastArray)
            const isSameSet = (one, two) => {
                if (one.size != two.size) return false;
                const arr1 = [...one];
                const arr2 = [...two];
                for (let x of arr1) {
                  if (!two.has(x)) {
                    return false;
                  }
                }
                for (let x of arr2) {
                  if (!one.has(x)) {
                    return false;
                  }
                }
                return true;
              }
            if (isSameSet(one, two)) {
                unique = false
            }
            if (unique) {
                uniqueArrays.push(array)
            }
        }
    }
    uniqueArrays.sort((a, b) => a.length - b.length).forEach(arr => console.log(arr.sort((a,b) => b - a)))
}

getUniqueSequences(["[-3, -2, -1, 0, 1, 2, 3, 4]",
    "[10, 1, -17, 0, 2, 13]",
    "[4, -3, 3, -2, 2, -1, 1, 0]"])
🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎
08. Garage


🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎
09. Armies


🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎
10. Comments


🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎
11. Book Shelf


🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎🌎
12. SoftUni Students
