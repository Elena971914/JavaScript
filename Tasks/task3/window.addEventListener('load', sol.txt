window.addEventListener('load', solve)

function solve() {
    const addBtn = document.getElementById('add-weather')
    const editBtn = document.getElementById('edit-weather')
    const loadBtn = document.getElementById('load-history')

    loadBtn.addEventListener('click', load)
    addBtn.addEventListener('click', add)

    const list = document.getElementById('list')
    
    async function getData() {
        try {
            data = await (await fetch('http://localhost:3030/jsonstore/tasks/')).json()
            return data
        }
        catch (e) { console.log(e) }
    }
    async function load() {
        list.innerHTML = ''
        editBtn.disabled = true
        let data = {}
        try { data = await (await fetch('http://localhost:3030/jsonstore/tasks/')).json() }
        catch (e) { console.log(e) }

        for (let forecast of Object.values(data)) {
            const div = createElement('div', list, "", ['container'], forecast._id, null, true)
            const city = createElement('h2', div, forecast.location)
            const date = createElement('h3', div, forecast.date)
            const temp = createElement('h3', div, forecast.temperature, ['celsius'])
            const btnsContainer = createElement('div', div, "", ['buttons-container'])
            const changeBtn = createElement('button', btnsContainer, 'Change', ['change-btn'])
            const deleteBtn = createElement('button', btnsContainer, 'Delete', ['delete-btn'])
            changeBtn.addEventListener('click', change)
            deleteBtn.addEventListener('click', delete_)
        }
    }

    async function change() {
        const [city, date, temp] = Array.from(this.parentNode.parentNode.children)
        const id = this.parentNode.parentNode.id
        this.parentNode.parentNode.remove()

        document.getElementById('location').value = city.textContent
        document.getElementById('date').value = date.textContent
        document.getElementById('temperature').value = temp.textContent

        editBtn.disabled = false
        addBtn.disabled = true
        editBtn.addEventListener('click', edit)

        async function edit(e) {
            const location = document.getElementById('location').value
            const date = document.getElementById('date').value
            const temperature = document.getElementById('temperature').value

            await fetch(`http://localhost:3030/jsonstore/tasks/${id}`, { method: 'PUT', body: JSON.stringify({ location, date, temperature }) })
            load()
            editBtn.disabled = true
            addBtn.disabled = false
            document.getElementById('location').value = ''
            document.getElementById('date').value = ''
            document.getElementById('temperature').value = ''
        }
    }

    async function add() {
        const location = document.getElementById('location').value
        const date = document.getElementById('date').value
        const temperature = document.getElementById('temperature').value

        if (!location || !date || !temperature) { return }

        await fetch('http://localhost:3030/jsonstore/tasks/', { method: 'POST', body: JSON.stringify({ location, date, temperature }) })
        load()
        document.getElementById('location').value = ''
        document.getElementById('date').value = ''
        document.getElementById('temperature').value = ''
    }
    async function delete_() {
        const id = this.parentNode.parentNode.id
        await fetch(`http://localhost:3030/jsonstore/tasks/${id}`, { method: 'DELETE' })
        load()
    }
    function createElement(type, parentNode, content, classes, id, attributes, useInnerHtml) {
        const htmlElement = document.createElement(type);

        if (content && useInnerHtml) {
            htmlElement.innerHTML = content;
        } else {
            if (content && type !== 'input') {
                htmlElement.textContent = content;
            }
            if (content && type === 'input') {
                htmlElement.value = content;
            }
        }
        if (classes && classes.length > 0) {
            htmlElement.classList.add(...classes);
        }
        if (id) {
            htmlElement.id = id;
        }
        // { src: 'link', href: 'http' }
        if (attributes) {
            for (const key in attributes) {
                htmlElement.setAttribute(key, attributes[key])
            }
        }
        if (parentNode) {
            parentNode.appendChild(htmlElement);
        }
        return htmlElement;
    }
}