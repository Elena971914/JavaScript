How to interract with database using API

The browser is in permanent dialogue with the server. There is a series of rules 
the browser and server follow in order to understand each other. 
HTTP is the language they both speak, the rules they follow to communicate. The browser 
is called a client, the source of the request. There are strict formations of the requests and responds. 

What happens when we write google.com in the browser?
- The domain is turned to IP address so it is accessible. READ

HTTP defines methods to indicate the desired action to be performed:
- GET - load, use it every time we open a page
- POST - log, post smth, send message. creating smth
- PUT/PATCH - update resoure (fully/partially) - the server may not be able to use one of these methods.
- DELETE
- HEAD/OPTIONS
      &&&&&&&&&&&&&&&&&&&&&&&&&&
Request:

-- method, url, http protocol
GET /users/testnakov/repos HTTP/1.1

--headers - more info for the request we send, metainfo, some are mendatory, like
Host: api.github.com
User-Agent: the browser we use, the client, automatically filled

<CRLF>JSON file stating what we want to create<CRLF>

Network tab in devtools: where all the requests are with their details
       &&&&&&&&&&&&&&&&&&&&&
Response: 

Content-Type: what is being sent to the browser to display - test/html, application/json

Responses return a result. Sometimes we make the server do something and it returns empty response (204). 
Responses are with statys codes: 200 okay, 201-created, 204- no content, 301/302- moved/redirected, 
400-bad request, 404- not found, 409-conflict, 422-problem with validation, 500/503 -server error

Server - machine that gets request and returns responses

REST

REpresentational State Transfer - Architectural style for client-server communication.
The client and server can communicate throuth HTTP, but if the fully potential of the HTTP is not used, 
the developer has more work to do. The REST helps the HTTP to work productive. It consists of RULES. 
Rest is important for server workers, who should make their APIs in respondence to the REST. API are 
the URLs that the server gives you in order to work with the data it consists of. Entity is a unit 
that is about the software we work with.. user is entity, product is entity. REST structure - 
post-> get -> get -> delete -> put/patch. REST implements the practice of using HTTP methods, practices, 
the structure of the urls that is based around the resources/entities. (the urls are more clear and structured). 
It is representational because by means of the URL and the methods we use we can take different 
representations of this resource. We are sending requests to the same URL and by means of the method 
(GET, POST, etc.) we are telling this API what we want to do.

REST APIs have 3 levels of maturity. Level 3 - it should be oriented around resources. name of the 
resource and id after: doctors/mjones; slots/1234. Level 2: use HTTP verbs- GET, POST, etc. 
Level 3: Hypermedia Controls- when we get a response it consists of connected related URL (comits_url) 

issues_url - array of issues
issues[/number] 

GITHUB API DOCS - REPOSITOTIES - the url structure of the APIs


fetch() - fetching data, if wse pass URL: makes request and returns code
fetch returns promise -js object for asynchronous operations 
(in the context of JS we have this kind of operations)
on preview in the devtools we can get all needed data

const repos = fetch(URL here)

setTimeout(()=> console.log('here'), 1000) - 1000 how many ms after reading the passed function should be executed
if number is 0 there is also delay, because when JS sees a function 
that makes him behave asynchronous it execution priority goes down (the line awaits)

function we pass are callback functions. not all functions that receive functions are asynchronous

setInterval(()=>console.log("1sec"), 1000)

Promises - object that has asynchronous operations (that will happen in the future)
pending-running
after that they become fulfilled or failed
we can make a promise with keyword 'new'
new Promise(executor)

fetch("url").then(res => console.log(res.json() )).catch((err) => console.log(err))

body:ReadableStream - then() function should be added again in the function chain

const simulatedResponse = new Promise((resolve, reject) => {setTimeout(() => resolve(),500)})
      simulatedResponse.then(() => console.log("Success").catch(() => console.log('Error'))}

When wrong url is passed to fetch() - 404 is successful request becacuse there is 
returned response and we should check explicitly if the url is valid
to append to the body the appended should be STRING

JS is not multi thread - the code is executed on one thread only, guaranteeing memory safety
Evedt loop is making possible the asynchronous operations.
05. var 1

function loadRepos() {
	const username = document.querySelector('#username').value
	const repos = document.querySelector("#repos")
	repos.innerHTML = ''

	fetch(`https://api.github.com/users/${username}/repos`)
		.then((result) => result.json(), (error) => { innerHTML += `${error.message}` }
		)
		.then((data) =>
			data.forEach(repo => {
				repos.innerHTML += `<li><a href=${repo.html_url}>${repo.full_name}</a></li>`
			}))
}

05. var2 

async function loadRepos() {
	const username = document.querySelector('#username').value
	const repos = document.querySelector("#repos")
	repos.innerHTML = ''

	try {
		const response = await fetch(`https://api.github.com/users/${username}/repos`)

		if (response.ok === false) {
			throw new Error(`${response.status} ${response.statusText}`)
		}

		const data = await response.json()
		data.forEach(repo => {
			repos.innerHTML += `<li><a href=${repo.html_url}>${repo.full_name}</a></li>`
		});
	}
	catch (err) {innerHTML += `${err.message}` }
}

06. Commits

function loadCommits() {
    const username = document.querySelector('#username').value
    const repo = document.querySelector('#repo').value

    if (!username || !repo) {
        return
    }

    const list = document.querySelector('ul')
    list.innerHTML = ""

    fetch(`https://api.github.com/repos/${username}/${repo}/commits`)
    .then((res)=> res.json())
    .then((commits)=> {
        commits.forEach((commit) => {
            const item = document.createElement('li')
            item.textContent = commit.commit.message
            list.appendChild(item)
        })
    })
}


Async / Await

Makes code look synchronic. await is the same as .then , but it is blocking word, not letting the code to continue being read.

async function loadCommits() {} ... - async functions return promise
where await functions are called they should be await-ed again.

await returns not promise but the object that is in the promise

getbootstrap.com/docs/4.2/components 
AJAX request is description of asynchronous HTML request through JS
RESTful is API, following the REST convention
